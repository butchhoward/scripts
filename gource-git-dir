#!/usr/bin/env bash


function show_help()
{

cat<<EOF


Pretty OpenGL display of activity in a collection of git repositories.

Requires:
    gource http://gource.io/ 
    bash version >= 4.x to get associate array support

    A folder with folders beneath it which are git repositories

Usage:
    gource-git-dir [-q] [-p ProjectName] [-r RemoteOrigin] [-b BranchesToDisplay] [-i [PollingInterval] [-B] [-N MaxBranches] [-- GOURCE_OPTIONS]
        -q Quiet (-ish)
            Ignore invalid branches

        -p ProjectName - defaults to "Base"
            This is a name to aide gource in displaying multiple branches
            It will also be displayed in the lower left of the window

        -r RemoteOrigin - defaults to "origin"
            This is the git remote for fetching and displaying logs from

        -b BranchesToDisplay - defaults to "master"
            A comma-delimited list of branch names that will be used to display logs.
            Example: "-b master,develop"

            This option uses the same list of branches for each repository.
            It's best if all the branches listed exist in all the repos. If that is not true, 
              it will not stop the script from gathering the logs from the branches that
              do exist. You will see some error output about the problems.

        -B Use all the existing branches on the remote for BranchesToDisplay
            If this is used, '-b' is ignored
            This option creates a different set of branches for each repository.
            Note that the more branches there are to display the long it will take to start up.

        -N MaxBranches
            Use with -B to limit the number of branches to graph for those repos with thousands of 
            undeleted branches.

        -i PollingInterval - defaults to 10
            The delay in seconds between polling cycles for fetching new commit logs

        -d Directories - defaults to all directories in the current folder (-d '.')
            Comma-delimited list of directories to process
            If a directory in the list is NOT a git repository, all the directories in it are used (only goes that one level deep)
            If you put spaces between the directories or the directories have spaces, you must quote the string (single quotes are probably best)

            -d './project1,~/allprojects'


    Pass gource options to the gource invocation by putting '--' after all the options for gource-git-dir
    and then the gource options. gource is run with some options already set:
        gource --title "${TITLE}" \\
               --key \\
               --fullscreen \\
               --hide root,usernames,filenames,mouse \\
               --log-format custom \\
               --file-idle-time 0 \\
               --max-files 0
                                
    See the gource wiki for listings of its options.

Installation:

    gource can be instlaled on Mac OSX with 
        brew install gource
    
    Check your bash version with 
        bash --version
    
    If you need a newer version, install it with
        brew install bash

Example:

Given the folder structure below where all of the folders under ./prpl are git repositories
And ./prpl is the current directory
And the script is run as 
    gource-git-dir -p Loop -r origin -b master,develop -i 10

Then a beautiful display graphic of changes to the repositories will be displayed after a short pause
to collect the initial logs.

./prpl
  |-pRpl
  |-pRpl-CAN
  |-pRpl-dev-tools
  |-pRpl-MOST
  |-pRpl-rest-client

The display will first show how the repositories evolved over time from the initial commits. When
it catches up to the current state, then it will poll each interval for new commits to display. The gource 
will start in full-screen mode. Press <ALT>-<ENTER> to change between full-screen and windowed. Press
<ESC> to quit (you might also have to <CTRL-C> the program in the terminal to get the polling piece to stop).
See the gource wiki for shortcut keys to modify the display while it is running.

Inspired by a similar display at a client site.
Some script ideas based on code at https://github.com/whitewhidow/gource-live
EOF

}

echoerr() 
{ 
    printf "%s\n" "$*" >&2
}

function git_supply()
{
    local PROJECT_BASE=$1
    local REMOTE=$2
    local BRANCH=$3
    local INTERVAL=$4
    local USE_ALL_BRANCHES=$5
    local MAX_BRANCHES=$6
    local DIRECTORY=$7
    local -a BRANCHES
    local -a DIRECTORIES
  
    local STAGE_FILE=''
    
    if ! STAGE_FILE="$(mktemp -q "/tmp/$(basename "$0").XXXXXX")"; then
        echo "$0: Can't create temp file, exiting..."
        return 110
    fi
  
    #requires Bash 4.x - associative array using directory name+branch as key
    declare -A SHAS=()

    if ! ${USE_ALL_BRANCHES} ; then
        IFS=',' read -r -a BRANCHES <<< "${BRANCH}"
    fi

    if [ -n "${DIRECTORY}" ]; then
        IFS=',' read -r -a DS <<< "${DIRECTORY}"

        for FOLDER in "${DS[@]}"; do 
            # eval FOLDER_GLOBBED="${FOLDER}"
            FOLDER_EXPANDED="${FOLDER/#\~/$HOME}"

            if [ -d "${FOLDER_EXPANDED}/.git" ]; then 
                DIRECTORIES=("${DIRECTORIES[@]}" "${FOLDER_EXPANDED%/*}")
            else
                for d in "${FOLDER_EXPANDED}"/*/ ; do
                    DIRECTORIES=("${DIRECTORIES[@]}" "${d%/*}")
                done
            fi
        done
    else
        DIRECTORIES=(./*/)
        DIRECTORIES=("${DIRECTORIES[@]%/}")
    fi


    while true
    do
        : > "${STAGE_FILE}"

        for REPO in "${DIRECTORIES[@]}"; do 
  
            if [ -d "${REPO}/.git" ]; then 

                pushd "${REPO}" &> /dev/null || break

                local INITIAL_COMMIT_SHA
                INITIAL_COMMIT_SHA=$(git rev-list --max-parents=0 HEAD)

                if ${USE_ALL_BRANCHES} ; then
                    BRANCH=$(git_all_branches "${REMOTE}" "${MAX_BRANCHES}")
                    if ! BRANCH=$(git_all_branches "${REMOTE}" "${MAX_BRANCHES}"); then
                        echoerr "no branches found in repo '${REPO}'"
                        return 109
                    fi
                    IFS=',' read -r -a BRANCHES <<< "${BRANCH}"                    
                fi

                for BRANCH in "${BRANCHES[@]}"; do
 
                    if ! git fetch "${REMOTE}" "${BRANCH}" >/dev/null 2>&1; then
                        if ${IGNORE_INVALID_BRANCHES}; then
                            continue
                        else
                            echoerr "invalid branch: '${BRANCH}' in repo '${REPO}'"
                            return 108
                        fi
                    fi

                    local BRANCH_KEY="${REPO}_${BRANCH}"
                    local SHA=${SHAS["${BRANCH_KEY}"]:-"${INITIAL_COMMIT_SHA}"}

                    for SHA in $(git rev-list --reverse --first-parent "${SHA}..${REMOTE}/${BRANCH}")
                    do
                        AUTHOR=$(git log --format=%an "${SHA}" --max-count=1)
                        TIMESTAMP=$(git log --format=%at "${SHA}" --max-count=1)
                        PREFIX="${TIMESTAMP}|${AUTHOR}|"
                        git diff-tree -r --no-commit-id --name-status "${SHA}" | tr '\t' '|' | while read -r SUFFIX
                        do
                            echo "${PREFIX}$(prepend_base_to_path "${PROJECT_BASE}/${REPO}/${BRANCH}" "${SUFFIX}")" >> "${STAGE_FILE}"
                        done
                    done

                    SHAS["${BRANCH_KEY}"]=${SHA}

                done
                popd &> /dev/null || break

            fi
        done

        ship_the_log_file "${STAGE_FILE}"

        test "${INTERVAL}" = 0 && break
        sleep "${INTERVAL}"
    done

    rm "${STAGE_FILE}" &>/dev/null

}

function gource_consume()
{
    local TITLE=$1
    shift
    gource --title "${TITLE}" --key \
                              --fullscreen \
                              --hide root,usernames,filenames,mouse \
                              --log-format custom \
                              --file-idle-time 0 \
                              --max-files 0 \
                              "$@" \
                              - <&0 \
                              1>&2
}

function ship_the_log_file
{
    local STAGE_FILE=$1

    #the output from the sort is the output for gource
    if [ -s "${STAGE_FILE}" ]; then
        sort -n "${STAGE_FILE}"
    fi
    
}
function prepend_base_to_path()
{
    #A|images/discussions/2017-06-09_CAN-In-A-Box/can-in-a-box.jpg
    local PROJECT_BASE=$1
    local STATUS_AND_PATH=$2
    echo "${STATUS_AND_PATH}" | sed -E "s#(.+)\|#\1|${PROJECT_BASE}/#"

}

function git_all_branches()
{

    local REMOTE=$1
    local LIMIT=${2:-100}
    local BRANCHES
    BRANCHES=""

    for BRANCH in $(git for-each-ref --count="${LIMIT}" --sort=-committerdate --format='%(refname:strip=3)' "refs/remotes/${REMOTE}"); do
        if [ "HEAD" == "${BRANCH}" ]; then
            continue
        elif [ -n "${BRANCHES}" ]; then
            # append comma delimiter if not first item
            BRANCHES="${BRANCHES},"
        fi
        BRANCHES="${BRANCHES}${BRANCH}"
    done

    echo "${BRANCHES}"
}


OPTIND=1

PROJECT_BASE="BASE"
REMOTE="origin"
BRANCH="master"
INTERVAL=10
USE_ALL_BRANCHES=false
MAX_BRANCHES=100
DIRECTORY=
IGNORE_INVALID_BRANCHES=false

while getopts "hqBp:r:b:i:N:d:" opt; do
    case "${opt}" in
    h|\?)
        show_help
        exit 0
        ;;
    q) IGNORE_INVALID_BRANCHES=true
        ;;
    p)  PROJECT_BASE=${OPTARG}
        ;;
    r)  REMOTE=${OPTARG}
        ;;
    b)  BRANCH=${OPTARG}
        ;;
    B) USE_ALL_BRANCHES=true
        ;;
    N) MAX_BRANCHES=${OPTARG}
        ;;
    i)  INTERVAL=${OPTARG}
        ;;
    d)  DIRECTORY=${OPTARG}
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

git_supply "${PROJECT_BASE}" "${REMOTE}" "${BRANCH}" "${INTERVAL}" "${USE_ALL_BRANCHES}" "${MAX_BRANCHES}" "${DIRECTORY}" | gource_consume "${PROJECT_BASE}" "$@"
