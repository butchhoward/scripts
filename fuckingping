#!/usr/bin/env bash

function show_help()
{

cat<<EOF


Fuckingping some IP addresses to check Wifi connectivity

Probably only works on MacOS


Usage:
    fuckingping [-h?qdx] [-v "voice"] [-V "phrase"] [-w list_delay] [-W ping_wait] [-- ip ip ip ...]
        -h, -? - Show usage help

        -q quiet -- does not speak status. default is to speak

        -d direct - use list of IP addresses give after '--'
            The default is to use a preset list of IP addresses that include local router
            and several public DNS servers

        -x eternal - use default list of IP address, but only the external ones
            This is useful when not using the house internet (i.e. a MiFi or some other)

        -v voice - use the "say" command voice name specified
            The default is "Fiona"

        -V define an alternate prefix, default is "Fucking"
            to turn off the Vulgarity use -V ""

        -w list delay seconds, default 10 seconds
            delay between iterations of checking the entire list

        -W ping waittime for packet response in milliseconds (same as the -W on the macos ping command)

        -- All arguments following are passed to processing commands
            This really only applies to "-d" and passes the list of IP addresses along

            The IP list is formatted with an identifying string a colon separate and the dotted-quad IP
            If the identifier is not given it is ignored and Fiona will speak the IP directly.

            router:10.10.1.1 "cable modem":73.184.0.28 "xfinity DNS":75.75.75.75 openDNS:208.67.222.222 GoogleDNS:8.8.8.8 "Cloudflare DNS"1.1.1.1


Examples:

    fuckingping

    fuckingping -q

    fuckingping -x

    fuckingping -d -- 1.1.1.1 8.8.8.8

EOF

}

function speak_internet_up()
{
    if ! $QUIETLY; then
        say --voice="${VOICE}" "Internet is back up"
    fi
}

function speak_ping_fail()
{
    if ! $QUIETLY; then
        say --voice="${VOICE}" "${VULGAR_PREFIX} can't ping ${1}"
    fi
}

function speak_internet_problem()
{
    if ! $QUIETLY; then
        say --voice="${VOICE}" "${VULGAR_PREFIX} $1 of $2 pings failed."
    fi
}

function current_wifi_adapter()
{
    networksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}' | xargs networksetup -getairportnetwork
}

function the_pinger()
{
    local ping_wait="${PING_WAIT:+"-W ${PING_WAIT}"}"
    #shellcheck disable=SC2086
    ping -nqo ${ping_wait} -c 1 "$1" &> /dev/null
}

function the_list_pinger()
{
    local failed_count=0

    for ip_value in "$@"; do
        local ip_name="${ip_value%%:*}"
        local ip="${ip_value##*:}"

        if ! the_pinger "${ip}"; then
            printf "%s " "${ip_name}"
            ((++failed_count))
        fi
    done

    return "$failed_count"
}

# this was an attempt to have it attempt all pings and return a list of failed
# i did not end up using this because a failed ping takes consderable time to fail
# if many were failing, it could be quite a long time before it would be reported (minutes, not hours, but...)
function fuckingping_listX()
{
    echo "Begin ping tests for: " "$@"
    current_wifi_adapter
    date -jR

    local internet_down=false

    while true; do 
        local error
        error="$(the_list_pinger "$@")"
        if ! error="$(the_list_pinger "$@")"; then
            printf "${VULGAR_PREFIX} can't ping %s %s\n" "${error}" "$(date -jR)"
            speak_internet_down "${error}"
            internet_down=true
        else
            if $internet_down; then 
                speak_internet_up
                internet_down=false
            fi
        fi
    done

}

function ping_the_list()
{
    local failed_count=0

    for ip_value in "$@"; do
        local ip_name="${ip_value%%:*}"
        local ip="${ip_value##*:}"

        if the_pinger "${ip}"; then
            printf "%s" "."
        else
            if [[ failed_count -eq 0 ]]; then 
                printf "\n";
            fi

            printf "${VULGAR_PREFIX} can't ping %s %s\n" "${ip}" "$(date -jR)"
            ((++failed_count))
            speak_ping_fail "${ip_name}"
        fi
    done

    return "${failed_count}"
}

function report_failed_internet()
{
    local failed_count=$1
    local internet_down=$2

    if [[ failed_count -eq 0 ]]; then 
        if $internet_down; then 
            speak_internet_up
            internet_down=false
        fi
    else
        internet_down=true
        speak_internet_problem "${failed_count}" "$#"
    fi

    echo "${internet_down}"
}

function fuckingping_list()
{
    echo "Begin ping tests for: " "$@"
    current_wifi_adapter
    date -jR

    local failed_count=0
    local internet_down=false

    while true; do 
        ping_the_list "$@"
        failed_count=$?

        printf "%s" "+"

        internet_down=$(report_failed_internet "${failed_count}" "${internet_down}")

        sleep "${LIST_DELAY}"
    done
}

function fuckingping_default()
{
    fuckingping_list  "router:10.10.1.1" "cable modem:73.184.0.28" "xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1"

}

function fuckingping_default_external()
{
    fuckingping_list "xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS1.1.1.1"
}


OPTIND=1

QUIETLY=false
VOICE="Fiona"
COMMAND="fuckingping_default"
LIST_DELAY=10
PING_WAIT=

while getopts "hqdxV:v:w:W:" opt; do
    case "${opt}" in
    h|\?)
        show_help
        exit 0
        ;;
    q)  QUIETLY=true
        ;;
    v)  VOICE="${OPTARG}"
        ;;
    d)  COMMAND="fuckingping_list"
        ;;
    x)  COMMAND="fuckingping_default_external"
        ;;
    V)  VULGAR_PREFIX="${OPTARG}"
        ;;
    w)  LIST_DELAY="${OPTARG}"
        ;;
    W)  PING_WAIT="${OPTARG}"
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

"${COMMAND}" "$@"
