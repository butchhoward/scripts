#!/usr/bin/env bash

function show_help()
{

cat<<EOF


Fuckingping some IP addresses to check Wifi connectivity


Usage:
    fuckingping [-h?qdx] [-v "voice"] [-V "phrase"] [-w list_delay] [-W ping_wait] [-- ip ip ip ...]
        -h, -? - Show usage help

        -q quiet -- does not speak status. default is to speak

        -Q very Quiet -- does not log full failed status only an marker in the dots instead.
           Default is to log time and ip that failed.

        -R Reporting -- Report data about connection (e.g. ping times during tests).
           Default is to not report.

        -u Annouce Up -- speaks internet up and down messages even if q or Q are used (only summary message
            when state changes instead of all ping failures)

        -d direct - use list of IP addresses given after '--'
            The default is to use a preset list of IP addresses that include local router
            and several public DNS servers

        -D Dig for cable router external IP address. Defaults to false: use config file if it exists.
            (dig adds a few-second delay to start up.)
            (To be perverse: -DD disables both dig and the config file use.)

        -x eternal - use default list of IP address, but only the external ones
            This is useful when not using the house internet (i.e. a MiFi or some other)

        -c critical addresses - define the number of IP addresses in the list to check which are critical
            The critical IP addresses must be at the beginning of the list
            If any one of the critical addresses fails a ping, then the remainder of the list is skipped

            When -d is used, the default value is zero.
            When -x is used, the default value is zero.
            When the default list is used, the default value is 3 (house routers and cable modem).

        -v voice - use the "say" command voice name(s) specified
            The default is "${VOICE_LIST}"
            If a comma-delimited string of names is used, the errors will cycle through the voices.

            Note: recent MacOS updates have relegated some voices to the cloud.
                  If the script hangs on an announcement, go to
                    Settings->Accessibility->System Voice->Manage Voices
                  find the missing voices (see the list above) and download them from the cloud.


        -F define an alternate prefix, default is "Fucking"
            to turn off the Vulgarity use -F ""

        -w list delay seconds, default 10 seconds
            delay between iterations of checking the entire list

        -W ping waittime for packet response in milliseconds (same as the -W on the macos ping command)

        -S speed test executed when network is either up at the beginning or returns to up after being down

        -- All arguments following are passed to processing commands
            This really only applies to "-d" and passes the list of IP addresses along

            The IP list is formatted with an identifying string a colon separate and the dotted-quad IP
            If the identifier is not given it is ignored and the announcer will speak the IP directly.

            The current default list (neither -d or -x are used) is:
            router:10.10.1.1 "cable modem":73.184.0.28 "xfinity DNS":75.75.75.75 openDNS:208.67.222.222 GoogleDNS:8.8.8.8 "Cloudflare DNS":1.1.1.1

            The list when -x is used is the same with the "router" and "cable modem" addresses removed.


Examples:

    fuckingping

    fuckingping -q

    fuckingping -x

    fuckingping -d -- 1.1.1.1 8.8.8.8

EOF

}

function control_c()
{
    echo
    exit 1
}
trap control_c SIGINT


MAX_IPS=128

IS_MACOS=true
if [[ "$OSTYPE" == "darwin"* ]]; then
    IS_MACOS=true
else
    IS_MACOS=false
fi

CONFIG_FILE="${HOME}/.f-ingping/f-ingping.json"

function config_create_default()
{
    local DEFAULT_CONFIG
    read -r -d '' DEFAULT_CONFIG <<- EOM
{
    "external_ip":""
}
EOM

    mkdir -p "$(dirname "${CONFIG_FILE}")"

    echo "${DEFAULT_CONFIG}" > "${CONFIG_FILE}"
}

function config_ensure_exists()
{
    if ! test -s "${CONFIG_FILE}" || ! jq -e '.' "${CONFIG_FILE}" > /dev/null 2>&1; then
        # can use jq to update a file, but it must exist first and be valid json
        config_create_default
    fi
}

function config_write_external_ip()
{
    local IP="$1"
    config_ensure_exists
    mv "${CONFIG_FILE}" "${CONFIG_FILE}.bak"
    jq ".external_ip = \"${IP}\"" "${CONFIG_FILE}.bak" > "${CONFIG_FILE}"
}

function config_read_external_ip()
{
    jq -r '.external_ip' "${CONFIG_FILE}" 2> /dev/null
}

function cable_router_ip()
{
    local IP

    # this adds a delay when the internet is bad I am not happy with, but...
    if ${DIG_LOCAL} && IP=$(dig +short myip.opendns.com @resolver1.opendns.com 2> /dev/null); then
        config_write_external_ip "${IP}"
    else
        ${USE_CONFIG_FILE} && IP=$(config_read_external_ip)
    fi

    echo "${IP}"
}

function check_keypress()
{
    read -rs -N 1 -t 0.1 input
    case "${input}" in
    [qQ]*) return 0
         ;;
    esac

    return 1
}

function speak_quietly()
{
    if ! ${VERY_QUIETLY}; then
        if command -v cowsay &> /dev/null ; then
            cowsay "$1"
        fi
    fi
}

function speak_loudly()
{
    if command -v say &> /dev/null ; then
        say --voice="$1" "$2" &> /dev/null
    fi
}

function speak_internet_up()
{
    local MSG="Internet is back up"

    if ! ${ANNOUNCE_UP} && ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[0]}" "${MSG}"
}

function speak_ping_fail()
{
    local MSG="${VULGAR_PREFIX} can't ping ${1}"

    if ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[${CURRENT_VOICE}]}" "${MSG}"

    ((++CURRENT_VOICE))
    if (( CURRENT_VOICE >= "${#VOICES[@]}" )); then
        CURRENT_VOICE=0
    fi
}

function speak_problem()
{
    local MSG="${1}"

    if ! ${ANNOUNCE_UP} && ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[0]}" "${MSG}"
}

function speak_internet_problem()
{
    speak_problem "${VULGAR_PREFIX} internet might be down. $1 of $2 pings failed."
}

function speak_critical_internet_problem()
{
    speak_problem "${VULGAR_PREFIX} internet might be down. $1 of $2 critical addresses failed."
}

function current_wifi_adapter()
{
    if ${IS_MACOS}; then
        networksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}' | xargs networksetup -getairportnetwork
    else
        echo "UNKNOWN WIFI"
    fi
}

function number1_network()
{
    local the_one="UNKNOWN"
    local is_enabled="MAYBE ENABLED"
    if ${IS_MACOS}; then
        the_one="$(networksetup -listnetworkserviceorder | grep -oEe '^\(1\) .*$' | grep -oEe '[A-Z][a-zA-Z ]+$')"
        if ! is_enabled="$(networksetup -getnetworkserviceenabled "${the_one}")" ;then
            is_enabled="NOT Enabled or NOT Present"
        fi
    fi
    echo "Preferred network: ${the_one} (${is_enabled})"
}

function speed_test()
{
    if ${IS_MACOS} && type -t networkQuality &> /dev/null  ; then
        networkQuality
        SPEED_TEST_RUN=true
    fi

}

function the_pinger()
{
    local ping_wait="${PING_WAIT:+"-W ${PING_WAIT}"}"
    local ping_out
    local rc=0

    set -o pipefail
    #shellcheck disable=SC2086
    if ping_out="$(ping -nqo ${ping_wait} -c 1 "$1" 2> /dev/null | tail -n 1)"; then
        # round-trip min/avg/max/stddev = 18.845/18.845/18.845/0.000 ms

        ping_out="${ping_out##*\ \=\ }"
        # 18.845/18.845/18.845/0.000 ms
        ping_out="${ping_out%%.*}"
        # 18
        echo "${ping_out}"
    else
        rc=$?
        printf "<%d>\n" $rc
    fi
    set +o pipefail

    return $rc
}

function ping_the_list()
{
    local failed_count=0
    local ip_index=0

    for ip_value in "$@"; do
        check_keypress && return 128

        local ip_name="${ip_value%%:*}"
        local ip="${ip_value##*:}"
        local pinger_out

        if pinger_out="$(the_pinger "${ip}")"; then
            if ${REPORTING}; then
                printf "%s" "${pinger_out},"
            else
                printf "%s" "."
            fi
        else
            printf "%s" "*"
            if ! ${VERY_QUIETLY}; then
                if (( failed_count == 0 )); then
                    printf "\n";
                fi
                what_failed="${ip_name:-"${ip}"} ${ip_name:+"(${ip})"}"
                printf "${VULGAR_PREFIX} can't ping %s %s\n" "${what_failed}" "$(date -jR)"
            fi

            ((++failed_count))
            speak_ping_fail "${ip_name:-"${ip}"}"

            if (( ip_index < CRITICAL_IPS )); then
                failed_count=$(( MAX_IPS + failed_count ))
                return "${failed_count}"
            fi
        fi
        ((++ip_index))
    done

    return "${failed_count}"
}

function report_failed_internet()
{
    local failed_count=$1
    local total_count=$2
    local internet_down=$3

    if (( failed_count == 0 )); then
        if (( internet_down )); then
            printf "%s" '↑'

            speak_internet_up
            internet_down=0
            ${SPEED_TEST} && speed_test
        else
            ${SPEED_TEST} && ! ${SPEED_TEST_RUN} && speed_test
        fi
    else
        if ! (( internet_down )); then
            if (( failed_count > MAX_IPS )) || (( failed_count == total_count )); then
                printf "%s" '↓'
                internet_down=1

                if (( failed_count > MAX_IPS )) ; then
                    failed_count=$(( failed_count - MAX_IPS ))
                    speak_critical_internet_problem "${failed_count}" "${CRITICAL_IPS}"
                else
                    speak_internet_problem "${failed_count}" "${total_count}"
                fi
            fi
        fi
    fi

    #shellcheck disable=SC2086
    return ${internet_down}
}


function fuckingping_list()
{
    if ! ${QUIETLY}; then
        echo "Begin ping tests for: " "$@"
    fi

    local failed_count=0
    local internet_down=0

    while true; do
        check_keypress && break

        ping_the_list "$@"
        failed_count=$?
        if (( failed_count == 128 )); then
            break
        fi

        printf "%s" "+"

        report_failed_internet "${failed_count}" "$#" ${internet_down}
        internet_down=$?

        sleep "${LIST_DELAY}"
    done
    echo
}

EXTERNAL_IPS_TO_CHECK=( "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1")
EXTERNAL_CRITICAL_IPS=("google.com" "xfinity DNS:75.75.75.75")
ROUTER_IP="router:10.10.1.1"

function default_list()
{
    if [[ "$#" -ne 0 ]]; then
        IPS_TO_CHECK=("$@")
        return 0
    fi

    local -a CRITICAL_IPS_TO_CHECK

    CRITICAL_IPS_TO_CHECK=("${ROUTER_IP}")

    CABLE_ROUTER_IP=$(cable_router_ip)
    if [ -n "${CABLE_ROUTER_IP}" ]; then
        CRITICAL_IPS_TO_CHECK+=("cable router:${CABLE_ROUTER_IP}")
    fi
    CRITICAL_IPS_TO_CHECK+=("${EXTERNAL_CRITICAL_IPS[@]}")

    CRITICAL_IPS="${#CRITICAL_IPS_TO_CHECK[@]}" # at least initial critical IPs and xfinity DNS

    IPS_TO_CHECK=("${CRITICAL_IPS_TO_CHECK[@]}" "${EXTERNAL_IPS_TO_CHECK[@]}")
}

function external_list()
{
    IPS_TO_CHECK=("${EXTERNAL_CRITICAL_IPS[@]}" "${EXTERNAL_IPS_TO_CHECK[@]}" "$@")
}


function check_dependencies()
{
    ${IS_MACOS} || echo "Not sure how this will work on non-MacOS systems."
    command -v ping &> /dev/null || echo "Requires 'ping' to test network connectivity."
    command -v networksetup &> /dev/null || echo "Requires 'networksetup' to get network status."
    command -v say &> /dev/null || echo "Voice options require 'say' to be installed."
    command -v cowsay &> /dev/null || echo "Some alternate (quiet) options require 'cowsay' to be installed."
    command -v jq &> /dev/null || echo "'jq' is required to process json data."
}

function report_opts()
{
    echo "QUIETLY=${QUIETLY}"
    echo "VERY_QUIETLY=${VERY_QUIETLY}"
    echo "REPORTING=${REPORTING}"
    echo "ANNOUNCE_UP=${ANNOUNCE_UP}"
    echo "VOICE_LIST=${VOICE_LIST}"
    echo "VULGAR_PREFIX=${VULGAR_PREFIX}"
    echo "LIST_DELAY=${LIST_DELAY}"
    echo "PING_WAIT=${PING_WAIT}"
    echo "CRITICAL_IPS=${CRITICAL_IPS}"
    echo "DIG_LOCAL=${DIG_LOCAL}"
    echo "USE_CONFIG_FILE=${USE_CONFIG_FILE}"
    check_dependencies
}

QUIETLY=false
VERY_QUIETLY=false
REPORTING=false
CURRENT_VOICE=0
VOICE_LIST="Moira,Tessa,Mei-jia,Xander,Daniel,Karen"
LIST_PREP_COMMAND="default_list"
LIST_DELAY=10
PING_WAIT=
VULGAR_PREFIX="Fucking"
CRITICAL_IPS=0
ANNOUNCE_UP=false
DIG_LOCAL=false
USE_CONFIG_FILE=true
SPEED_TEST=false
SPEED_TEST_RUN=false
declare -a IPS_TO_CHECK
NEED_HELP=false

function set_opt_R()
{
    REPORTING=true
    return 0
}

function set_opt_q()
{
    QUIETLY=true
    return 0
}

function set_opt_Q()
{
    VERY_QUIETLY=true
    set_opt_q
}

function set_opt_ping-delay()
{
    PING_WAIT="${1}"
    return 1
}
function set_opt_W()
{
    set_opt_ping-delay "$1"
}

function set_opt_x()
{
    LIST_PREP_COMMAND="external_list"
    return 0
}

function set_opt_v()
{
    VOICE_LIST="${1}"
    return 1
}

function set_opt_d()
{
    LIST_PREP_COMMAND="default_list"
    return 0
}

function set_opt_D()
{
    if ${DIG_LOCAL}; then
        DIG_LOCAL=false
        USE_CONFIG_FILE=false
    else
        DIG_LOCAL=true
    fi
    return 0
}
function set_opt_u()
{
    ANNOUNCE_UP=true
    return 0
}
function set_opt_F()
{
    VULGAR_PREFIX="${1}"
    return 1
}
function set_opt_list-delay()
{
    LIST_DELAY="${1}"
    return 1
}
function set_opt_w()
{
    set_opt_list-delay "$1"
}
function set_opt_c()
{
    CRITICAL_IPS="${1}"
    return 1
}
function set_opt_S()
{
    SPEED_TEST=true
    return 0
}
function set_opt_help()
{
    NEED_HELP=true
    return 1
}

shopt -s extglob

while (( "$#" )); do
    case "$1" in
    --)
        shift
        break
        ;;

    # long options using equal sign
    # --list-delay=22
    --@(list-delay|ping-delay)=* )
        value="${1##*=}"
        opt="${1%%=*}"
        opt="${opt:2}"
        "set_opt_${opt}" "${value}"
        ;;

    # long options with no equal sign, with or without value
    # --help
    # --list-delay 22
    --@(help|list-delay|ping-delay) )
        opt="${1:2}"
        "set_opt_${opt}" "$2" || shift
        ;;

    # short options, single or set, possibly last takes a value
    # -q
    # -W 22
    # -qdu
    # -qdW 22
    -+([hqQRdDxuFvwWcS?]) )
        opts="$1"
        for (( i=1; i<${#opts}; i++ )); do
            opt="${1:$i:1}"
            case "${opt}" in
            [?h])
                opt="help"
                ;;
            esac
            "set_opt_${opt}" "$2" || shift
        done
        ;;

    *)
        echo "Unknown Option: '$1'"
        exit 0
        ;;
    esac
    shift
done

IFS=', ' read -r -a VOICES <<< "${VOICE_LIST}"

"${LIST_PREP_COMMAND}" "$@"

if ${NEED_HELP}; then
    show_help
    exit 0
fi

if ! ${VERY_QUIETLY}; then
    echo "Trying to ${VULGAR_PREFIX} Ping some IP addresses to check internet connectivity"
fi

if ! ${QUIETLY}; then
    report_opts
    current_wifi_adapter
    number1_network
    date -jR
fi

fuckingping_list "${IPS_TO_CHECK[@]}"
