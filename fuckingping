#!/usr/bin/env bash

# Note that this script is pretty heavily MacOS-specific


function show_help()
{

cat<<EOF


Fuckingping some IP addresses to check Wifi connectivity

Probably only works on MacOS


Usage:
    fuckingping [-h?qdx] [-v "voice"] [-V "phrase"] [-w list_delay] [-W ping_wait] [-- ip ip ip ...]
        -h, -? - Show usage help

        -q quiet -- does not speak status. default is to speak

        -d direct - use list of IP addresses given after '--'
            The default is to use a preset list of IP addresses that include local router
            and several public DNS servers

        -x eternal - use default list of IP address, but only the external ones
            This is useful when not using the house internet (i.e. a MiFi or some other)

        -c critical addresses - define the number of IP addresses in the list to check which are critical 
            The critical IP addresses must be at the beginning of the list
            If any one of the critical addresses fails a ping, then the remainder of the list is skipped

            When -d is used, the default value is zero.
            When -x is used, the default value is zero.
            When the default list is used, the default value is 2 (house router and cable modem).

        -v voice - use the "say" command voice name(s) specified
            The default is "Fiona,Tessa,Mei-jia,Xander,Daniel,Karen"
            If a comma-delimited string of names is used, the errors will cycle through the voices.
            

        -F define an alternate prefix, default is "Fucking"
            to turn off the Vulgarity use -F ""

        -w list delay seconds, default 10 seconds
            delay between iterations of checking the entire list

        -W ping waittime for packet response in milliseconds (same as the -W on the macos ping command)

        -- All arguments following are passed to processing commands
            This really only applies to "-d" and passes the list of IP addresses along

            The IP list is formatted with an identifying string a colon separate and the dotted-quad IP
            If the identifier is not given it is ignored and Fiona will speak the IP directly.

            The current default list (neither -d or -x are used) is:
            router:10.10.1.1 "cable modem":73.184.0.28 "xfinity DNS":75.75.75.75 openDNS:208.67.222.222 GoogleDNS:8.8.8.8 "Cloudflare DNS"1.1.1.1

            The list when -x is used is the same with the "router" and "cable modem" addresses removed.


Examples:

    fuckingping

    fuckingping -q

    fuckingping -x

    fuckingping -d -- 1.1.1.1 8.8.8.8

EOF

}

function speak_internet_up()
{
    if ! ${QUIETLY}; then
        say --voice="${VOICES[0]}" "Internet is back up"
    fi
}

function speak_ping_fail()
{
    if ! ${QUIETLY}; then
        say --voice="${VOICES[${CURRENT_VOICE}]}" "${VULGAR_PREFIX} can't ping ${1}"
        ((++CURRENT_VOICE))
        if [[ "${CURRENT_VOICE}" -ge "${#VOICES[@]}" ]]; then
            CURRENT_VOICE=0
        fi

    fi
}

function speak_internet_problem()
{
    if ! ${QUIETLY}; then
        say --voice="${VOICES[0]}" "${VULGAR_PREFIX} $1 of $2 pings failed."
    fi
}

function current_wifi_adapter()
{
    networksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}' | xargs networksetup -getairportnetwork
}

function number1_network()
{
    local the_one
    the_one="$(networksetup -listnetworkserviceorder | grep -oEe '^\(1\) .*$' | grep -oEe '[A-Z][a-zA-Z ]+$')"
    local is_enabled
    if ! is_enabled="$(networksetup -getnetworkserviceenabled "${the_one}")" ;then
        is_enabled="NOT Enabled or NOT Present"
    fi

    echo "Preferred network: ${the_one} (${is_enabled})"
}

function the_pinger()
{
    local ping_wait="${PING_WAIT:+"-W ${PING_WAIT}"}"
    #shellcheck disable=SC2086
    ping -nqo ${ping_wait} -c 1 "$1" &> /dev/null
}

function ping_the_list()
{
    local failed_count=0
    local ip_index=0

    for ip_value in "$@"; do
        local ip_name="${ip_value%%:*}"
        local ip="${ip_value##*:}"

        if the_pinger "${ip}"; then
            printf "%s" "."
        else
            if [[ ${failed_count} -eq 0 ]]; then 
                printf "\n";
            fi

            printf "${VULGAR_PREFIX} can't ping %s %s\n" "${ip}" "$(date -jR)"
            ((++failed_count))
            speak_ping_fail "${ip_name}"

            ((++ip_index))
            if [[ ${ip_index} -lt ${CRITICAL_IPS} ]]; then
                break;
            fi
        fi
    done

    return "${failed_count}"
}

function report_failed_internet()
{
    local failed_count=$1
    local total_count=$2
    local internet_down=$3

    if [[ ${failed_count} -eq 0 ]]; then 
        if ${internet_down}; then 
            speak_internet_up
            internet_down=false
        fi
    else
        internet_down=true
        speak_internet_problem "${failed_count}" "${total_count}"
    fi

    echo "${internet_down} " "$(date -jR)"
}

function report_opts()
{
    echo "QUIETLY=${QUIETLY}"
    echo "VOICE_LIST=${VOICE_LIST}"
    echo "COMMAND=${COMMAND}"
    echo "VULGAR_PREFIX=${VULGAR_PREFIX}"
    echo "LIST_DELAY=${LIST_DELAY}"
    echo "PING_WAIT=${PING_WAIT}"
    echo "CRITICAL_IPS=${CRITICAL_IPS}"
}

function fuckingping_list()
{
    echo "Begin ping tests for: " "$@"
    report_opts
    current_wifi_adapter
    number1_network
    date -jR

    local failed_count=0
    local internet_down=false

    while true; do 
        ping_the_list "$@"
        failed_count=$?

        printf "%s" "+"

        internet_down=$(report_failed_internet "${failed_count}" "$#" "${internet_down}")

        sleep "${LIST_DELAY}"
    done
}

function fuckingping_default()
{
    fuckingping_list  "router:10.10.1.1" "cable modem:73.184.0.28" "xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1"
}

function fuckingping_default_external()
{
    fuckingping_list "xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1"
}


OPTIND=1

QUIETLY=false
CURRENT_VOICE=0
VOICE_LIST="Fiona,Tessa,Mei-jia,Xander,Daniel,Karen"
COMMAND="fuckingping_default"
LIST_DELAY=10
PING_WAIT=
VULGAR_PREFIX="Fucking"
CRITICAL_IPS=0

while getopts "hqdxF:v:w:W:c:" opt; do
    case "${opt}" in
    h|\?)
        show_help
        exit 0
        ;;
    q)  QUIETLY=true
        ;;
    v)  VOICE_LIST="${OPTARG}"
        ;;
    d)  COMMAND="fuckingping_list"
        ;;
    x)  COMMAND="fuckingping_default_external"
        ;;
    F)  VULGAR_PREFIX="${OPTARG}"
        ;;
    w)  LIST_DELAY="${OPTARG}"
        ;;
    W)  PING_WAIT="${OPTARG}"
        ;;
    c)  critical_ips_opt="${OPTARG}"
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

IFS=', ' read -r -a VOICES <<< "${VOICE_LIST}"

if [ -v critical_ips_opt ]; then
    CRITICAL_IPS=${critical_ips_opt}
else
    case "${COMMAND}" in
    fuckingping_default)
        CRITICAL_IPS=2
        ;;
    *)
        CRITICAL_IPS=0
        ;;
    esac
fi


"${COMMAND}" "$@"
