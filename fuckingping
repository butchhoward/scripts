#!/usr/bin/env bash

function show_help()
{

cat<<EOF


Fuckingping some IP addresses to check Wifi connectivity


Usage:
    fuckingping [-h?qdx] [-v "voice"] [-V "phrase"] [-w list_delay] [-W ping_wait] [-- ip ip ip ...]
        -h, -? - Show usage help

        -q quiet -- does not speak status. default is to speak

        -Q very Quiet -- does not log full failed status only an marker in the dots instead.
           Default is to log time and ip that failed.

        -u Annouce Up -- speaks internet up and down messages even if q or Q are used (only summary message
            when state changes instead of all ping failures)

        -d direct - use list of IP addresses given after '--'
            The default is to use a preset list of IP addresses that include local router
            and several public DNS servers
        
        -D Dig for cable router external IP address. Defaults to false: use config file if it exists. 
            (adds a few-second delay to start up)

        -x eternal - use default list of IP address, but only the external ones
            This is useful when not using the house internet (i.e. a MiFi or some other)

        -c critical addresses - define the number of IP addresses in the list to check which are critical
            The critical IP addresses must be at the beginning of the list
            If any one of the critical addresses fails a ping, then the remainder of the list is skipped

            When -d is used, the default value is zero.
            When -x is used, the default value is zero.
            When the default list is used, the default value is 3 (house routers and cable modem).

        -v voice - use the "say" command voice name(s) specified
            The default is "Fiona,Tessa,Mei-jia,Xander,Daniel,Karen"
            If a comma-delimited string of names is used, the errors will cycle through the voices.


        -F define an alternate prefix, default is "Fucking"
            to turn off the Vulgarity use -F ""

        -w list delay seconds, default 10 seconds
            delay between iterations of checking the entire list

        -W ping waittime for packet response in milliseconds (same as the -W on the macos ping command)

        -- All arguments following are passed to processing commands
            This really only applies to "-d" and passes the list of IP addresses along

            The IP list is formatted with an identifying string a colon separate and the dotted-quad IP
            If the identifier is not given it is ignored and Fiona will speak the IP directly.

            The current default list (neither -d or -x are used) is:
            router:10.10.1.1 "cable modem":73.184.0.28 "xfinity DNS":75.75.75.75 openDNS:208.67.222.222 GoogleDNS:8.8.8.8 "Cloudflare DNS"1.1.1.1

            The list when -x is used is the same with the "router" and "cable modem" addresses removed.


Examples:

    fuckingping

    fuckingping -q

    fuckingping -x

    fuckingping -d -- 1.1.1.1 8.8.8.8

EOF

}

function control_c()
{
    echo
    exit 1
}
trap control_c SIGINT


MAX_IPS=128

IS_MACOS=true
if [[ "$OSTYPE" == "darwin"* ]]; then
    IS_MACOS=true
else
    IS_MACOS=false
fi

function cable_router_ip()
{
    local IP
    local router_file="${HOME}"/.f-ingping/cable_router_ip.txt
    
    # this adds a delay I am not happy with, but...
    if ! ${DIG_LOCAL} || ! IP=$(dig +short myip.opendns.com @resolver1.opendns.com 2> /dev/null); then
        if [ -f "${router_file}" ]; then
            IP=$(cat "${router_file}")
        fi
    else
        echo "${IP}" > "${router_file}"
    fi

    echo "${IP}"
}

function check_keypress()
{
    read -rs -N 1 -t 0.1 input
    case "${input}" in
    [qQ]*) return 0
         ;;
    esac

    return 1
}

function speak_quietly()
{
    if ! ${VERY_QUIETLY}; then
        if command -v cowsay &> /dev/null ; then
            cowsay "$1"
        fi
    fi
}

function speak_loudly()
{
    if command -v say &> /dev/null ; then
        say --voice="$1" "$2" &> /dev/null
    fi
}

function speak_internet_up()
{
    local MSG="Internet is back up"

    if ! ${ANNOUNCE_IP} && ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[0]}" "${MSG}"
}

function speak_ping_fail()
{
    local MSG="${VULGAR_PREFIX} can't ping ${1}"

    if ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[${CURRENT_VOICE}]}" "${MSG}"

    ((++CURRENT_VOICE))
    if [[ "${CURRENT_VOICE}" -ge "${#VOICES[@]}" ]]; then
        CURRENT_VOICE=0
    fi
}

function speak_internet_problem()
{
    local MSG="${VULGAR_PREFIX} internet might be down. $1 of $2 pings failed."

    if ! ${ANNOUNCE_IP} && ${QUIETLY}; then
        speak_quietly "${MSG}"
        return 0
    fi

    speak_loudly "${VOICES[0]}" "${MSG}"
}

function current_wifi_adapter()
{
    if ${IS_MACOS}; then
        networksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}' | xargs networksetup -getairportnetwork
    else
        echo "UNKNOWN WIFI"
    fi
}

function number1_network()
{
    local the_one="UNKNOWN"
    local is_enabled="MAYBE ENABLED"
    if ${IS_MACOS}; then
        the_one="$(networksetup -listnetworkserviceorder | grep -oEe '^\(1\) .*$' | grep -oEe '[A-Z][a-zA-Z ]+$')"
        if ! is_enabled="$(networksetup -getnetworkserviceenabled "${the_one}")" ;then
            is_enabled="NOT Enabled or NOT Present"
        fi
    fi
    echo "Preferred network: ${the_one} (${is_enabled})"
}

function the_pinger()
{
    local ping_wait="${PING_WAIT:+"-W ${PING_WAIT}"}"
    #shellcheck disable=SC2086
    ping -nqo ${ping_wait} -c 1 "$1" &> /dev/null
}

function ping_the_list()
{
    local failed_count=0
    local ip_index=0

    for ip_value in "$@"; do
        check_keypress && return 128

        local ip_name="${ip_value%%:*}"
        local ip="${ip_value##*:}"

        if the_pinger "${ip}"; then
            printf "%s" "."
        else
            if ${VERY_QUIETLY}; then
                printf "%s" "*"
            else
                if [[ ${failed_count} -eq 0 ]]; then
                    printf "\n";
                fi
                what_failed="${ip_name:-"${ip}"} ${ip:-"(${ip})"}"
                printf "${VULGAR_PREFIX} can't ping %s %s\n" "${what_failed}" "$(date -jR)"
            fi

            ((++failed_count))
            speak_ping_fail "${ip_name:-"${ip}"}"

            ((++ip_index))
            if [[ ${ip_index} -lt ${CRITICAL_IPS} ]]; then
                failed_count=$((${MAX_IPS} + ${failed_count}))
                return "${failed_count}"
            fi
        fi
    done

    return "${failed_count}"
}

function report_failed_internet()
{
    local failed_count=$1
    local total_count=$2
    local internet_down=$3

    if [[ ${failed_count} -eq 0 ]]; then
        if [[ ${internet_down} -ne 0 ]]; then
            printf "%s" '↑'

            speak_internet_up
            internet_down=0
        fi
    else
        if [[ ${internet_down} -eq 0 ]]; then
            if [ ${failed_count} -gt ${MAX_IPS} ] || [ ${failed_count} -eq "${total_count}" ]; then
                printf "%s" '↓'
                internet_down=1
                failed_count=$(( ${failed_count} > ${MAX_IPS} ? ${failed_count}-${MAX_IPS} : ${failed_count} ))
                speak_internet_problem "${failed_count}" "${total_count}"
            fi
        fi
    fi

    return ${internet_down}
}

function report_opts()
{
    echo "QUIETLY=${QUIETLY}"
    echo "VERY_QUIETLY=${VERY_QUIETLY}"
    echo "ANNOUCE_UP=${ANNOUCE_UP}"
    echo "VOICE_LIST=${VOICE_LIST}"
    echo "COMMAND=${COMMAND}"
    echo "VULGAR_PREFIX=${VULGAR_PREFIX}"
    echo "LIST_DELAY=${LIST_DELAY}"
    echo "PING_WAIT=${PING_WAIT}"
    echo "CRITICAL_IPS=${CRITICAL_IPS}"
    echo "DIG_LOCAL=${DIG_LOCAL}"
}


function fuckingping_list()
{
    if ! ${QUIETLY}; then
        echo "Begin ping tests for: " "$@"
    fi

    local failed_count=0
    local internet_down=0

    while true; do
        check_keypress && break

        ping_the_list "$@"
        failed_count=$?
        if [ ${failed_count} -eq 128 ]; then
            break
        fi

        printf "%s" "+"

        report_failed_internet "${failed_count}" "$#" ${internet_down}
        internet_down=$?

        sleep "${LIST_DELAY}"
    done
    echo
}

function fuckingping_default()
{
    local -a ips
    ips=("router:10.10.1.1")
    CRITICAL_IPS=2 # at least the home router and xfinity DNS

    CABLE_ROUTER_IP=$(cable_router_ip)
    if [ -n "${CABLE_ROUTER_IP}" ]; then
        ips+=("cable router:${CABLE_ROUTER_IP}")
        CRITICAL_IPS=3
    fi

    ips+=("xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1")
    fuckingping_list "${ips[@]}"
}

function fuckingping_default_external()
{
    local -a ips
    ips=("xfinity DNS:75.75.75.75" "open DNS:208.67.222.222" "Google DNS:8.8.8.8" "Cloudflare DNS:1.1.1.1")
    fuckingping_list "${ips[@]}"
}


OPTIND=1

QUIETLY=false
VERY_QUIETLY=false
CURRENT_VOICE=0
VOICE_LIST="Fiona,Tessa,Mei-jia,Xander,Daniel,Karen"
COMMAND="fuckingping_default"
LIST_DELAY=10
PING_WAIT=
VULGAR_PREFIX="Fucking"
CRITICAL_IPS=0
ANNOUCE_UP=false
DIG_LOCAL=false

while getopts "hqQdDxuF:v:w:W:c:" opt; do
    case "${opt}" in
    h|\?)
        show_help
        exit 0
        ;;
    q)  QUIETLY=true
        ;;
    Q)  VERY_QUIETLY=true
        QUIETLY=true
        ;;
    v)  VOICE_LIST="${OPTARG}"
        ;;
    d)  COMMAND="fuckingping_list"
        ;;
    x)  COMMAND="fuckingping_default_external"
        ;;
    F)  VULGAR_PREFIX="${OPTARG}"
        ;;
    w)  LIST_DELAY="${OPTARG}"
        ;;
    W)  PING_WAIT="${OPTARG}"
        ;;
    c)  CRITICAL_IPS="${OPTARG}"
        ;;
    u) ANNOUCE_UP=true
        ;;
    D) DIG_LOCAL=true
        ;;
    esac
done

# shift away the processed options
shift $((OPTIND-1))

# if there is a -- the all that follows should be IPs for the -d command
[ "$1" = "--" ] && shift

IFS=', ' read -r -a VOICES <<< "${VOICE_LIST}"

if ! ${VERY_QUIETLY}; then
    echo "Trying to fucking ping some IP addresses to check internet connectivity"
fi

if ! ${QUIETLY}; then
    report_opts
    current_wifi_adapter
    number1_network
    date -jR
fi

"${COMMAND}" "$@"
